def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def dartEnvironmentVariables = [:]
if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                [(pair.first()): pair.last()]
            }
}

def appStage = dartEnvironmentVariables.APP_STAGE ?: 'dev'

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'

        // This includes firebase configuration per build stage.
        // The values are located at google-services/{appStage}, which are not included at VCS.
        main.res.srcDirs += 'google-services/' + appStage
    }

    defaultConfig {
        applicationId "com.coffeehmm.mobile_app"
        applicationIdSuffix (appStage != 'release' ? '.' + appStage : '')
        minSdkVersion 19
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        versionNameSuffix "-" + appStage
        manifestPlaceholders = [appStage: appStage]
    }

    signingConfigs {
        release {
            storeFile file("$System.env.KEY_PATH")
            storePassword = "$System.env.SIGNING_STORE_PASSWORD"
            keyAlias = "$System.env.ALIAS"
            keyPassword = "$System.env.SIGNING_KEY_PASSWORD"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
